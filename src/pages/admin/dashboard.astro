---
import AdminNav from "../../components/AdminNav.astro";
import Layout from "../../layouts/Layout.astro";
import { supabase } from "../../lib/supabase";

// Fetch data
const { data: profile } = await supabase.from("profiles").select("*").single();

const { data: experiences } = await supabase
  .from("experiences")
  .select("*")
  .order("start_date", { ascending: false });

const { data: projects } = await supabase
  .from("projects")
  .select("*")
  .order("created_at", { ascending: false });
---

<Layout title="Admin Dashboard">
  <main class="bg-gray-900 min-h-screen text-white p-8">
    <div class="max-w-6xl mx-auto">
      <AdminNav active="dashboard" />

      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        <!-- Profile Section -->
        <div class="bg-gray-800 p-6 rounded-lg">
          <h2 class="text-2xl font-bold mb-4">Profile</h2>
          <form id="profile-form" class="space-y-4">
            <div>
              <label class="block text-sm font-medium mb-1">Full Name</label>
              <input
                type="text"
                name="full_name"
                value={profile?.full_name}
                class="w-full bg-gray-700 rounded p-2"
              />
            </div>
            <div>
              <label class="block text-sm font-medium mb-1">Headline</label>
              <input
                type="text"
                name="headline"
                value={profile?.headline}
                class="w-full bg-gray-700 rounded p-2"
              />
            </div>
            <div>
              <label class="block text-sm font-medium mb-1">Profile Photo</label
              >
              <input
                type="file"
                id="avatar"
                accept="image/*"
                class="w-full bg-gray-700 rounded p-2"
              />
              {
                profile?.avatar_url && (
                  <img
                    src={profile.avatar_url}
                    alt="Profile"
                    class="mt-2 w-32 h-32 object-cover rounded-lg"
                  />
                )
              }
            </div>
            <button
              type="submit"
              class="bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded"
            >
              Update Profile
            </button>
          </form>
        </div>

        <!-- Media Upload Section -->
        <div class="bg-gray-800 p-6 rounded-lg">
          <h2 class="text-2xl font-bold mb-4">Upload Media</h2>
          <form id="media-upload-form" class="space-y-4">
            <div>
              <label class="block text-sm font-medium mb-1">Title</label>
              <input
                type="text"
                name="title"
                class="w-full bg-gray-700 rounded p-2"
                required
              />
            </div>
            <div>
              <label class="block text-sm font-medium mb-1">Category</label>
              <select
                name="category"
                class="w-full bg-gray-700 rounded p-2"
                required
              >
                <option value="media">Media Development</option>
                <option value="video">Video Development</option>
                <option value="curriculum">Curriculum Development</option>
                <option value="graphic">Graphic Design</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium mb-1">Media File</label>
              <input
                type="file"
                id="media"
                accept="image/*"
                class="w-full bg-gray-700 rounded p-2"
                required
              />
            </div>
            <div>
              <label class="block text-sm font-medium mb-1">Description</label>
              <textarea
                name="description"
                class="w-full bg-gray-700 rounded p-2"
                rows="3"></textarea>
            </div>
            <button
              type="submit"
              class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded"
            >
              Upload Media
            </button>
          </form>
        </div>
      </div>

      <!-- Media Gallery -->
      <div class="mt-8 bg-gray-800 p-6 rounded-lg">
        <h2 class="text-2xl font-bold mb-4">Media Gallery</h2>
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4" id="media-gallery">
          {
            projects?.map((project) => (
              <div class="relative group">
                <img
                  src={project.image_url}
                  alt={project.title}
                  class="w-full h-48 object-cover rounded-lg"
                />
                <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center">
                  <button
                    class="delete-media bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded"
                    data-id={project.id}
                  >
                    Delete
                  </button>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { supabase } from "../../lib/supabase";

  document.addEventListener("DOMContentLoaded", () => {
    const authToken = localStorage.getItem(
      "sb-xyrcjvuxxvdpghcvsjzf-auth-token"
    );
    if (!authToken) return (window.location.href = "/");

    let userId = null;

    try {
      const parsedToken = JSON.parse(authToken);
      if (parsedToken.expires_at < Math.floor(Date.now() / 1000)) {
        console.warn("Token sudah kedaluwarsa.");
        window.location.href = "/";
      }
      userId = parsedToken.user.id;
    } catch (error) {
      console.error("Error parsing auth token:", error);
      window.location.href = "/";
    }

    // Profile form handler
    document
      .getElementById("profile-form")
      ?.addEventListener("submit", async (e) => {
        e.preventDefault();
        const form = e.target as HTMLFormElement;
        const formData = new FormData(form);
        const avatarInput = document.getElementById(
          "avatar"
        ) as HTMLInputElement;
        const avatarFile = avatarInput.files?.[0];

        let avatarUrl = null;
        if (avatarFile) {
          const { data, error } = await supabase.storage
            .from("avatar")
            .upload(`avatar-${Date.now()}`, avatarFile);

          if (error) {
            alert("Error uploading avatar: " + error.message);
            return;
          }

          avatarUrl = supabase.storage.from("avatar").getPublicUrl(data.path)
            .data.publicUrl;
        }

        const { error } = await supabase
          .from("profiles")
          .update({
            full_name: formData.get("full_name"),
            headline: formData.get("headline"),
            ...(avatarUrl && { avatar_url: avatarUrl }),
          })
          .eq("user_id", userId /* current profile id */);

        if (error) {
          alert("Error updating profile: " + error.message);
        } else {
          alert("Profile updated successfully!");
          window.location.reload();
        }
      });

    // Media upload handler
    document
      .getElementById("media-upload-form")
      ?.addEventListener("submit", async (e) => {
        e.preventDefault();
        const form = e.target as HTMLFormElement;
        const formData = new FormData(form);
        const mediaInput = document.getElementById("media") as HTMLInputElement;
        const mediaFile = mediaInput.files?.[0];

        if (!mediaFile) {
          alert("Please select a file to upload");
          return;
        }

        // Upload media file
        const { data, error: uploadError } = await supabase.storage
          .from("media")
          .upload(
            `${formData.get("category")}/${Date.now()}-${mediaFile.name}`,
            mediaFile
          );

        if (uploadError) {
          alert("Error uploading media: " + uploadError.message);
          return;
        }

        // Get public URL
        const mediaUrl = supabase.storage.from("media").getPublicUrl(data.path)
          .data.publicUrl;

        // Save project
        const { error: saveError } = await supabase.from("projects").insert({
          title: formData.get("title"),
          description: formData.get("description"),
          category: formData.get("category"),
          image_url: mediaUrl,
        });

        if (saveError) {
          alert("Error saving project: " + saveError.message);
        } else {
          alert("Media uploaded successfully!");
          window.location.reload();
        }
      });

    // Delete media handler
    document.querySelectorAll(".delete-media").forEach((button) => {
      button.addEventListener("click", async () => {
        if (!confirm("Are you sure you want to delete this media?")) return;

        const projectId = (button as HTMLButtonElement).dataset.id;
        const { error } = await supabase
          .from("projects")
          .delete()
          .eq("id", projectId);

        if (error) {
          alert("Error deleting media: " + error.message);
        } else {
          alert("Media deleted successfully!");
          window.location.reload();
        }
      });
    });
  });
</script>
