---
import Layout from "../../layouts/Layout.astro";
import AdminNav from "../../components/AdminNav.astro";
import { supabase } from "../../lib/supabase";

// Fetch experiences
const { data: experiences } = await supabase
  .from("experiences")
  .select("*")
  .order("start_date", { ascending: false });
---

<Layout title="Admin - Experiences">
  <main class="bg-gray-900 min-h-screen text-white p-8">
    <div class="max-w-4xl mx-auto">
      <AdminNav active="experiences" />

      <div class="bg-gray-800 p-6 rounded-lg mb-8">
        <h2 class="text-2xl font-bold mb-6">Add Experience</h2>

        <form id="experience-form" class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-medium mb-2">Company Name</label>
              <input
                type="text"
                name="company_name"
                required
                class="w-full bg-gray-700 rounded p-2"
              />
            </div>

            <div>
              <label class="block text-sm font-medium mb-2">Position</label>
              <input
                type="text"
                name="position"
                required
                class="w-full bg-gray-700 rounded p-2"
              />
            </div>

            <div>
              <label class="block text-sm font-medium mb-2">Start Date</label>
              <input
                type="date"
                name="start_date"
                class="w-full bg-gray-700 rounded p-2"
              />
            </div>

            <div>
              <label class="block text-sm font-medium mb-2">End Date</label>
              <input
                type="date"
                name="end_date"
                class="w-full bg-gray-700 rounded p-2"
              />
            </div>
          </div>

          <div>
            <label class="block text-sm font-medium mb-2">Description</label>
            <textarea
              name="description"
              rows="4"
              class="w-full bg-gray-700 rounded p-2"></textarea>
          </div>

          <div>
            <label class="block text-sm font-medium mb-2"
              >Tools Used (comma-separated)</label
            >
            <input
              type="text"
              name="tools_used"
              class="w-full bg-gray-700 rounded p-2"
              placeholder="e.g., React, TypeScript, Node.js"
            />
          </div>

          <div class="flex justify-end">
            <button
              type="submit"
              class="bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-6 rounded"
            >
              Add Experience
            </button>
          </div>
        </form>
      </div>

      <div class="bg-gray-800 p-6 rounded-lg">
        <h2 class="text-2xl font-bold mb-6">Experiences</h2>

        <div class="space-y-6">
          {
            experiences?.map((experience) => (
              <div class="bg-gray-700 p-4 rounded-lg">
                <div class="flex justify-between items-start mb-4">
                  <div>
                    <h3 class="text-xl font-semibold">
                      {experience.company_name}
                    </h3>
                    <p class="text-gray-300">{experience.position}</p>
                    <p class="text-sm text-gray-400">
                      {new Date(experience.start_date).toLocaleDateString()} -
                      {experience.end_date
                        ? new Date(experience.end_date).toLocaleDateString()
                        : "Present"}
                    </p>
                  </div>
                  <button
                    class="delete-experience text-red-500 hover:text-red-400"
                    data-id={experience.id}
                  >
                    Delete
                  </button>
                </div>
                <p class="text-gray-300 mb-2">{experience.description}</p>
                {experience.tools_used && (
                  <div class="flex flex-wrap gap-2">
                    {experience.tools_used.map((tool) => (
                      <span class="bg-gray-600 px-2 py-1 rounded text-sm">
                        {tool}
                      </span>
                    ))}
                  </div>
                )}
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { supabase } from "../../lib/supabase";

  document.addEventListener("DOMContentLoaded", () => {
    const authToken = localStorage.getItem(
      "sb-xyrcjvuxxvdpghcvsjzf-auth-token"
    );
    if (!authToken) return (window.location.href = "/");
    let userId = null;
    try {
      const parsedToken = JSON.parse(authToken);
      if (parsedToken.expires_at < Math.floor(Date.now() / 1000)) {
        console.warn("Token sudah kedaluwarsa.");
        window.location.href = "/";
      }
      userId = parsedToken.user.id;
    } catch (error) {
      console.error("Error parsing auth token:", error);
      window.location.href = "/";
    }

    const form = document.getElementById("experience-form");

    form?.addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target as HTMLFormElement);

      try {
        const { error } = await supabase.from("experiences").insert({
          profile_id: userId,
          company_name: formData.get("company_name"),
          position: formData.get("position"),
          start_date: formData.get("start_date"),
          end_date: formData.get("end_date") || null,
          description: formData.get("description"),
          tools_used: formData
            .get("tools_used")
            ?.toString()
            .split(",")
            .map((t) => t.trim()),
        });

        if (error) throw error;

        alert("Experience added successfully!");
        window.location.reload();
      } catch (error) {
        alert("Error adding experience: " + error.message);
      }
    });

    // Delete experience handler
    document.querySelectorAll(".delete-experience").forEach((button) => {
      button.addEventListener("click", async () => {
        if (!confirm("Are you sure you want to delete this experience?"))
          return;

        const experienceId = (button as HTMLButtonElement).dataset.id;

        try {
          const { error } = await supabase
            .from("experiences")
            .delete()
            .eq("id", experienceId);

          if (error) throw error;

          alert("Experience deleted successfully!");
          window.location.reload();
        } catch (error) {
          alert("Error deleting experience: " + error.message);
        }
      });
    });
  });
</script>
