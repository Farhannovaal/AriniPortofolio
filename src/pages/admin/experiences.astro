---
import Layout from "../../layouts/Layout.astro";
import AdminNav from "../../components/AdminNav.astro";
import { supabase } from "../../lib/supabase";

// Fetch experiences
const { data: experiences } = await supabase
  .from("experiences")
  .select("*")
  .order("start_date", { ascending: false });
---

<Layout title="Admin - Experiences">
  <main class="bg-gray-900 min-h-screen text-white p-8">
    <div class="max-w-4xl mx-auto">
      <AdminNav active="experiences" />

      <div class="bg-gray-800 p-6 rounded-lg mb-8">
        <h2 class="text-2xl font-bold mb-6" id="form-title">Add Experience</h2>

        <form id="experience-form" class="space-y-6">
          <input type="hidden" name="experience_id" />

          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-medium mb-2">Company Name</label>
              <input
                type="text"
                name="company_name"
                required
                class="w-full bg-gray-700 rounded p-2"
              />
            </div>

            <div>
              <label class="block text-sm font-medium mb-2">Company Logo</label>
              <div class="flex items-center space-x-4">
                <input
                  type="file"
                  id="avatar"
                  accept="image/*"
                  class="bg-gray-700 rounded p-2"
                />
              </div>
            </div>

            <div>
              <label class="block text-sm font-medium mb-2">Position</label>
              <input
                type="text"
                name="position"
                required
                class="w-full bg-gray-700 rounded p-2"
              />
            </div>

            <div>
              <label class="block text-sm font-medium mb-2">Start Date</label>
              <input
                type="date"
                name="start_date"
                class="w-full bg-gray-700 rounded p-2"
              />
            </div>

            <div>
              <label class="block text-sm font-medium mb-2">End Date</label>
              <input
                type="date"
                name="end_date"
                class="w-full bg-gray-700 rounded p-2"
              />
            </div>
          </div>

          <div>
            <label class="block text-sm font-medium mb-2">Description</label>
            <textarea
              name="description"
              rows="4"
              class="w-full bg-gray-700 rounded p-2"></textarea>
          </div>

          <div>
            <label class="block text-sm font-medium mb-2"
              >Tools Used (comma-separated)</label
            >
            <input
              type="text"
              name="tools_used"
              class="w-full bg-gray-700 rounded p-2"
              placeholder="e.g., React, TypeScript, Node.js"
            />
          </div>

          <div class="flex justify-end">
            <button
              type="submit"
              class="bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-6 rounded"
              id="submit-button"
            >
              Add Experience
            </button>
          </div>
        </form>
      </div>

      <div class="bg-gray-800 p-6 rounded-lg">
        <h2 class="text-2xl font-bold mb-6">Experiences</h2>

        <div class="space-y-6">
          {
            experiences?.map((experience) => (
              <div class="bg-gray-700 p-4 rounded-lg">
                <div class="flex justify-between items-start mb-4">
                  <div>
                    <h3 class="text-xl font-semibold">
                      {experience.company_name}
                    </h3>
                    <p class="text-gray-300">{experience.position}</p>
                    <p class="text-sm text-gray-400">
                      {new Date(experience.start_date).toLocaleDateString()} -
                      {experience.end_date
                        ? new Date(experience.end_date).toLocaleDateString()
                        : "Present"}
                    </p>
                  </div>
                  <div class="flex space-x-4">
                    <button
                      class="edit-experience text-blue-400 hover:text-blue-300"
                      data-id={experience.id}
                      data-company={experience.company_name}
                      data-position={experience.position}
                      data-start={experience.start_date}
                      data-end={experience.end_date}
                      data-description={experience.description}
                      data-tools={experience.tools_used?.join(", ")}
                    >
                      Edit
                    </button>
                    <button
                      class="delete-experience text-red-500 hover:text-red-400"
                      data-id={experience.id}
                    >
                      Delete
                    </button>
                  </div>
                </div>
                <p class="text-gray-300 mb-2">{experience.description}</p>
                {experience.tools_used && (
                  <div class="flex flex-wrap gap-2">
                    {experience.tools_used.map((tool) => (
                      <span class="bg-gray-600 px-2 py-1 rounded text-sm">
                        {tool}
                      </span>
                    ))}
                  </div>
                )}
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { supabase } from "../../lib/supabase";

  document.addEventListener("DOMContentLoaded", () => {
    const authToken = localStorage.getItem(
      "sb-xyrcjvuxxvdpghcvsjzf-auth-token"
    );
    if (!authToken) return (window.location.href = "/");

    let userId = null;
    try {
      const parsedToken = JSON.parse(authToken);
      if (parsedToken.expires_at < Math.floor(Date.now() / 1000)) {
        window.location.href = "/";
      }
      userId = parsedToken.user.id;
    } catch (error) {
      window.location.href = "/";
    }

    const form = document.getElementById("experience-form");
    const avatarInput = document.getElementById("avatar");
    const submitButton = document.getElementById("submit-button");
    const formTitle = document.getElementById("form-title");

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(form);
      const experienceId = formData.get("experience_id");
      let avatarUrl = null;

      // Ambil file avatar jika ada
      const avatarFile = avatarInput.files[0];

      try {
        let error;

        if (avatarFile) {
          // Upload avatar ke Supabase Storage
          const { data, error: uploadError } = await supabase.storage
            .from("avatar")
            .upload(`avatar-${Date.now()}`, avatarFile);

          if (uploadError) throw uploadError;

          // Ambil URL gambar yang di-upload
          avatarUrl = supabase.storage.from("avatar").getPublicUrl(data.path)
            .data.publicUrl;
        }

        const experienceData = {
          profile_id: userId,
          company_name: formData.get("company_name"),
          position: formData.get("position"),
          start_date: formData.get("start_date"),
          end_date: formData.get("end_date") || null,
          description: formData.get("description"),
          tools_used: formData
            .get("tools_used")
            ?.toString()
            .split(",")
            .map((t) => t.trim()),
          ...(avatarUrl && { avatar_url: avatarUrl }), // Tambahkan URL avatar jika ada
        };

        if (experienceId) {
          ({ error } = await supabase
            .from("experiences")
            .update(experienceData)
            .eq("id", experienceId));
        } else {
          ({ error } = await supabase
            .from("experiences")
            .insert(experienceData));
        }

        if (error) throw error;

        alert(`Experience ${experienceId ? "updated" : "added"} successfully!`);
        form.reset();
        form["experience_id"].value = ""; // Reset form agar kembali ke mode "Add"
        formTitle.textContent = "Add Experience";
        submitButton.textContent = "Add Experience";
        window.location.reload();
      } catch (error) {
        alert("Error saving experience: " + error.message);
      }
    });

    document.querySelectorAll(".edit-experience").forEach((button) => {
      button.addEventListener("click", (e) => {
        const dataset = e.target.dataset;
        form["experience_id"].value = dataset.id;
        form["company_name"].value = dataset.company;
        form["position"].value = dataset.position;
        form["start_date"].value = dataset.start;
        form["end_date"].value = dataset.end || "";
        form["description"].value = dataset.description;
        form["tools_used"].value = dataset.tools || "";

        formTitle.textContent = "Edit Experience";
        submitButton.textContent = "Update Experience";
      });
    });
  });
</script>
