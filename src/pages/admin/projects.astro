---
import Layout from "../../layouts/Layout.astro";
import AdminNav from "../../components/AdminNav.astro";
import { supabase } from "../../lib/supabase";

// Fetch projects
const { data: projects } = await supabase
  .from("projects")
  .select("*")
  .order("created_at", { ascending: false });
---

<Layout title="Admin - Projects">
  <main class="bg-gray-900 min-h-screen text-white p-8">
    <div class="max-w-4xl mx-auto">
      <AdminNav active="projects" />

      <div class="bg-gray-800 p-6 rounded-lg mb-8">
        <h2 class="text-2xl font-bold mb-6">Add Project</h2>

        <form id="project-form" class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="md:col-span-2">
              <label class="block text-sm font-medium mb-2">Project Title</label
              >
              <input
                type="text"
                name="title"
                required
                class="w-full bg-gray-700 rounded p-2"
              />
            </div>

            <div class="md:col-span-2">
              <label class="block text-sm font-medium mb-2">Description</label>
              <textarea
                name="description"
                rows="4"
                class="w-full bg-gray-700 rounded p-2"></textarea>
            </div>

            <div>
              <label class="block text-sm font-medium mb-2">Project URL</label>
              <input
                type="url"
                name="project_url"
                class="w-full bg-gray-700 rounded p-2"
                placeholder="https://"
              />
            </div>

            <div>
              <label class="block text-sm font-medium mb-2"
                >Technologies (comma-separated)</label
              >
              <input
                type="text"
                name="technologies"
                class="w-full bg-gray-700 rounded p-2"
                placeholder="e.g., React, Node.js, MongoDB"
              />
            </div>

            <div class="md:col-span-2">
              <label class="block text-sm font-medium mb-2">Project Image</label
              >
              <input
                type="file"
                id="project_image"
                accept="image/*"
                class="w-full bg-gray-700 rounded p-2"
              />
            </div>
          </div>

          <div class="flex justify-end">
            <button
              type="submit"
              class="bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-6 rounded"
            >
              Add Project
            </button>
          </div>
        </form>
      </div>

      <div class="bg-gray-800 p-6 rounded-lg">
        <h2 class="text-2xl font-bold mb-6">Projects</h2>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {
            projects?.map((project) => (
              <div class="bg-gray-700 p-4 rounded-lg">
                {project.image_url && (
                  <img
                    src={project.image_url}
                    alt={project.title}
                    class="w-full h-48 object-cover rounded-lg mb-4"
                  />
                )}
                <div class="flex justify-between items-start mb-4">
                  <div>
                    <h3 class="text-xl font-semibold">{project.title}</h3>
                    {project.project_url && (
                      <a
                        href={project.project_url}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="text-orange-500 hover:text-orange-400 text-sm"
                      >
                        View Project â†’
                      </a>
                    )}
                  </div>
                  <button
                    class="delete-project text-red-500 hover:text-red-400"
                    data-id={project.id}
                  >
                    Delete
                  </button>
                </div>
                <p class="text-gray-300 mb-4">{project.description}</p>
                {project.technologies && (
                  <div class="flex flex-wrap gap-2">
                    {project.technologies.map((tech) => (
                      <span class="bg-gray-600 px-2 py-1 rounded text-sm">
                        {tech}
                      </span>
                    ))}
                  </div>
                )}
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { supabase } from "../../lib/supabase";

  document.addEventListener("DOMContentLoaded", () => {
    const authToken = localStorage.getItem(
      "sb-xyrcjvuxxvdpghcvsjzf-auth-token"
    );
    if (!authToken) return (window.location.href = "/");

    try {
      const parsedToken = JSON.parse(authToken);
      if (parsedToken.expires_at < Math.floor(Date.now() / 1000)) {
        console.warn("Token sudah kedaluwarsa.");
        window.location.href = "/";
      }
    } catch (error) {
      console.error("Error parsing auth token:", error);
      window.location.href = "/";
    }

    const form = document.getElementById("project-form");
    const imageInput = document.getElementById(
      "project_image"
    ) as HTMLInputElement;

    form?.addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target as HTMLFormElement);
      const imageFile = imageInput.files?.[0];

      try {
        let imageUrl = null;

        if (imageFile) {
          const { data, error: uploadError } = await supabase.storage
            .from("projects")
            .upload(`project-${Date.now()}`, imageFile);

          if (uploadError) throw uploadError;

          imageUrl = supabase.storage.from("projects").getPublicUrl(data.path)
            .data.publicUrl;
        }

        const { error } = await supabase.from("projects").insert({
          title: formData.get("title"),
          description: formData.get("description"),
          project_url: formData.get("project_url"),
          technologies: formData
            .get("technologies")
            ?.toString()
            .split(",")
            .map((t) => t.trim()),
          image_url: imageUrl,
        });

        if (error) throw error;

        alert("Project added successfully!");
        window.location.reload();
      } catch (error) {
        alert("Error adding project: " + error.message);
      }
    });

    // Delete project handler
    document.querySelectorAll(".delete-project").forEach((button) => {
      button.addEventListener("click", async () => {
        if (!confirm("Are you sure you want to delete this project?")) return;

        const projectId = (button as HTMLButtonElement).dataset.id;

        try {
          const { error } = await supabase
            .from("projects")
            .delete()
            .eq("id", projectId);

          if (error) throw error;

          alert("Project deleted successfully!");
          window.location.reload();
        } catch (error) {
          alert("Error deleting project: " + error.message);
        }
      });
    });
  });
</script>
